population_summary <- puerto_rico_counts |>
group_by(agegroup, sex) |>
summarise(mean_population = mean(population, na.rm = TRUE))
library(excessmort)
library(dplyr)
library(lubridate)
library(ggplot2)
library(readxl)
data("puerto_rico_counts")
head(puerto_rico_counts)
population_summary <- puerto_rico_counts |>
group_by(agegroup, sex) |>
summarise(mean_population = mean(population, na.rm = TRUE))
print(population_summary)
ggplot(population_summary, aes(x = agegroup, y = mean_population, fill = sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Population Size by Age Group and Sex",
x = "Age Group", y = "Average Population Size") +
theme_minimal()
pre_2017_data <- puerto_rico_counts |>
filter(date < as.Date("2017-01-01")) |>
mutate(
year = year(date),
week_of_year = epiweek(date)
)
# Aggregate by year, week_of_year, agegroup, and sex, and ensure full weeks (7 distinct days)
weekly_data <- pre_2017_data |>
group_by(year, week_of_year, agegroup, sex) |>
summarise(
weekly_outcome = sum(outcome, na.rm = TRUE),
ndays = n_distinct(date),  # Count distinct days in this week-group
.groups = 'drop'
) |>
filter(ndays == 7)  # Keep only full weeks
# Compute baseline statistics across all pre-2017 years
baseline_stats <- weekly_data |>
group_by(agegroup, sex, week_of_year) |>
summarise(
mean_outcome = mean(weekly_outcome, na.rm = TRUE),
sd_outcome = sd(weekly_outcome, na.rm = TRUE),
.groups = 'drop'
)
# Plot: Facet by age group, color by sex on the same plot
ggplot(baseline_stats, aes(x = week_of_year, y = mean_outcome, color = sex)) +
geom_line() +
facet_wrap(~ agegroup, scales = "free_y") +
labs(
title = "Weekly Expected Mortality (Pre-2017) by Age Group and Sex",
x = "Week of Year",
y = "Mean Weekly Mortality",
color = "Sex"
) +
theme_minimal()
# Filter for pre-2017 and 2017 data, assign year and week_of_year
pre_and_during_2017 <- puerto_rico_counts |>
filter(date < as.Date("2018-01-01")) |>  # Include all data before 2018
mutate(
year = year(date),
week_of_year = epiweek(date)
) |>
group_by(year, week_of_year) |>
summarise(
total_outcome = sum(outcome, na.rm = TRUE),  # Sum weekly outcomes
ndays = n_distinct(date),                   # Ensure full weeks (7 days)
.groups = "drop"
) |>
filter(ndays == 7) |>  # Keep only full weeks
mutate(
week_start = as.Date(paste(year, week_of_year, 1, sep = "-"), "%Y-%U-%u")  # Start of each epiweek
)
# Visualization: Weekly total mortality over time
# Add a new date column to represent the start of each week
pre_and_during_2017 <- pre_and_during_2017 |>
mutate(week_start = as.Date(paste(year, week_of_year, 1, sep = "-"), "%Y-%U-%u"))
ggplot(pre_and_during_2017, aes(x = week_start, y = total_outcome)) +
geom_line(color = "#2C3E50", size = 1) +
geom_smooth(se = FALSE, color = "#E74C3C", linetype = "dashed", size = 0.8) +
labs(
title = "Weekly Total Mortality (Pre-2017 and 2017)",
x = "Week Start Date",
y = "Total Weekly Mortality"
) +
scale_x_date(date_labels = "%Y", date_breaks = "12 months") +
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.y = element_text(margin = margin(r = 10)),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#ECF0F1")
)
# Identify weeks with mortality >= 700 for year > 1987 and < 2017
weeks_high_mortality_post_1987 <- pre_and_during_2017 |>
filter(year > 1987 & year <= 2017, total_outcome >= 700) |>
select(year, week_of_year, total_outcome, week_start)
# Identify weeks with mortality > 550 for year <= 1987
weeks_high_mortality_pre_1987 <- pre_and_during_2017 |>
filter(year <= 1987, total_outcome > 550) |>
select(year, week_of_year, total_outcome, week_start)
# Combine high mortality weeks
high_mortality_weeks <- bind_rows(
weeks_high_mortality_post_1987 |> select(year, week_of_year),
weeks_high_mortality_pre_1987 |> select(year, week_of_year)
)
#### Remove high mortality weeks from baseline computation
# Filter pre-2017 data and define epiweek and year
pre_2017_data <- puerto_rico_counts |>
filter(date < as.Date("2017-01-01")) |>
mutate(
year = year(date),
week_of_year = epiweek(date)
)
# Aggregate by year, week_of_year, agegroup, and sex, and ensure full weeks (7 distinct days)
weekly_data <- pre_2017_data |>
group_by(year, week_of_year, agegroup, sex) |>
summarise(
weekly_outcome = sum(outcome, na.rm = TRUE),
ndays = n_distinct(date),  # Count distinct days in this week-group
.groups = 'drop'
) |>
filter(ndays == 7)  # Keep only full weeks
# Remove weeks with high mortality
filtered_weekly_data <- weekly_data |>
anti_join(high_mortality_weeks, by = c("year", "week_of_year"))
# Compute baseline statistics across all pre-2017 years, excluding high mortality weeks
baseline_stats <- filtered_weekly_data |>
group_by(agegroup, sex, week_of_year) |>
summarise(
mean_outcome = mean(weekly_outcome, na.rm = TRUE),
sd_outcome = sd(weekly_outcome, na.rm = TRUE),
.groups = 'drop'
)
maria <- make_date(2017, 9, 20)
q4_data <- puerto_rico_counts |>
filter(between(year(date), 2017, 2018)) |>
mutate(date = floor_date(date, week_start = wday(maria)-1, unit = "week"))
weekly_counts <- q4_data |>
group_by(date, sex, agegroup) |>
summarize(outcome = sum(outcome,na.rm = TRUE),n = n(),
.groups = "drop")|>
filter(n == 7) |>
select(-n)|>
mutate(week_of_year=epiweek(date))
excess_counts <- weekly_counts %>%
left_join(baseline_stats, by = c('sex', 'agegroup','week_of_year'))|>
mutate(excess_deaths=outcome-mean_outcome)
# Plot the combined groups
ggplot(excess_counts, aes(x = date, y = excess_deaths, color = sex)) +
geom_line() +
facet_wrap(~ agegroup, scales = "free_y") +
labs(
title = "Weekly Excess Mortality  by Combined Age Groups and Sex",
x = "Week of Year",
y = "Weekly Excess Mortality"
) +
theme(
axis.text.x = element_text(angle = 70, hjust = 1),  # Rotate week labels for better readability
strip.text = element_text(size = 10, face = "bold") # Adjust facet label
)
# Read and prepare NYTimes data
ny_times <- read_excel("../data/ny_times_data.xlsx") %>%
arrange(Date) %>%
mutate(Date = as.Date(Date))  # Ensure Date column is in Date format
# Prepare Puerto Rico daily data
daily_data <- puerto_rico_counts %>%
filter(date >= as.Date("2015-01-01") & date <= as.Date("2017-11-30")) %>%  # Filter date range
group_by(date) %>%
summarize(Outcome = sum(outcome, na.rm = TRUE), .groups = "drop") %>%
rename(Date = date) %>%  # Rename `date` to `Date` for consistency
arrange(Date)
# Join datasets and calculate the difference
compared_data <- ny_times %>%
left_join(daily_data, by = "Date") %>%
rename(Outcome_NYTimes = Outcome.x, Outcome_DailyData = Outcome.y) %>%
mutate(Difference = Outcome_NYTimes - Outcome_DailyData)  # Add Difference column
# Plot the data
ggplot(compared_data, aes(x = Date)) +
geom_line(aes(y = Outcome_NYTimes, color = "NYTimes"), size = 1) +
geom_line(aes(y = Outcome_DailyData, color = "DailyData"), size = 1) +
labs(
title = "Comparison of NYTimes and Daily Data Outcomes",
x = "Date",
y = "Mortality",
color = "Dataset"
) +
scale_x_date(
breaks = "2 months",             # Add breaks every 2 months
date_labels = "%Y-%m-%d",        # Format labels as "Year-Month-Day"
expand = c(0, 0)                 # Remove extra space on the x-axis
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for readability
legend.position = "bottom"                          # Move legend to the bottom
)
population_summary <- puerto_rico_counts |>
group_by(agegroup, sex) |>
summarise(mean_population = mean(population, na.rm = TRUE))
print(population_summary)
ggplot(population_summary, aes(x = agegroup, y = mean_population, fill = sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Population Size by Age Group and Sex",
x = "Age Group", y = "Average Population Size") +
population_summary <- puerto_rico_counts |>
group_by(agegroup, sex) |>
summarise(mean_population = mean(population, na.rm = TRUE))
print(population_summary)
ggplot(population_summary, aes(x = agegroup, y = mean_population, fill = sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Population Size by Age Group and Sex",
x = "Age Group", y = "Average Population Size") +
theme_minimal()
